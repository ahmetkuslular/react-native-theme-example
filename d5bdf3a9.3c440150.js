(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return h})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var o=n(3),i=n(7),c=(n(0),n(88)),s=["components"],r={id:"use-with-style",title:"useWithStyle",slug:"/use-with-style",hide_table_of_contents:!0,hide_title:!0},h={unversionedId:"use-with-style",id:"use-with-style",isDocsHomePage:!1,title:"useWithStyle",description:"useWithStyle",source:"@site/docs/useWithStyle.md",slug:"/use-with-style",permalink:"/react-native-with-style/docs/use-with-style",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/useWithStyle.md",version:"current",sidebar:"someSidebar",previous:{title:"With Style",permalink:"/react-native-with-style/docs/with-style"}},l=[{value:"<code>currentTheme</code> | object",id:"currenttheme--object",children:[]},{value:"<code>themeTypes</code> | array",id:"themetypes--array",children:[]},{value:"<code>themeType</code> | string",id:"themetype--string",children:[]},{value:"<code>toggleTheme</code> | function",id:"toggletheme--function",children:[]}],a={toc:l};function u(e){var t=e.components,n=Object(i.a)(e,s);return Object(c.b)("wrapper",Object(o.a)({},a,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"usewithstyle"},"useWithStyle"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"useWithStyle")," is a hook function."),Object(c.b)("h1",{id:"hook-props"},"hook Props"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Takes 4 props wrapped with useWithStyle.")),Object(c.b)("h3",{id:"currenttheme--object"},Object(c.b)("inlineCode",{parentName:"h3"},"currentTheme")," | object"),Object(c.b)("p",null,"return the current theme if you want to do the styling directly in the component and not via styles"),Object(c.b)("h3",{id:"themetypes--array"},Object(c.b)("inlineCode",{parentName:"h3"},"themeTypes")," | array"),Object(c.b)("p",null,"Returns the key of the all themes."),Object(c.b)("h3",{id:"themetype--string"},Object(c.b)("inlineCode",{parentName:"h3"},"themeType")," | string"),Object(c.b)("p",null,"Returns the key of the current theme."),Object(c.b)("h3",{id:"toggletheme--function"},Object(c.b)("inlineCode",{parentName:"h3"},"toggleTheme")," | function"),Object(c.b)("p",null,"Function that allows you to change the theme. It takes the key of the new theme as a parameter."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-tsx"},'const HomeScreen = ({ styles }) => {\n  const { themeType, themeTypes, toggleTheme, currentTheme } = useWithStyle();\n\n  const barStyle = themeType === "light" ? "dark-content" : "light-content";\n\n  const handleToggleTheme = () => {\n    toggleTheme(themeType === "light" ? "dark" : "light");\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={barStyle} />\n      <TouchableOpacity onPress={handleToggleTheme}>\n        <Text style={styles.text}>Switch Theme</Text>\n      </TouchableOpacity>\n    </SafeAreaView>\n  );\n};\n')))}u.isMDXComponent=!0}}]);