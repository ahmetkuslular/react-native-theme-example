(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return h}));var o=n(3),a=n(7),r=(n(0),n(88)),i=["components"],c={id:"usage",title:"Usage",slug:"/usage",hide_table_of_contents:!0,hide_title:!0},l={unversionedId:"usage",id:"usage",isDocsHomePage:!1,title:"Usage",description:"Usage",source:"@site/docs/usage.md",slug:"/usage",permalink:"/react-native-with-style/docs/usage",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/usage.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/react-native-with-style/docs/"}},s=[{value:"Usage",id:"usage",children:[{value:"Provider",id:"provider",children:[]},{value:"With Styles",id:"with-styles",children:[]},{value:"Component Props",id:"component-props",children:[]},{value:"<code>styles</code>",id:"styles",children:[]},{value:"<code>theme</code>",id:"theme",children:[]},{value:"<code>themeType</code>",id:"themetype",children:[]},{value:"<code>toggleTheme</code>",id:"toggletheme",children:[]}]}],d={toc:s};function h(e){var t=e.components,n=Object(a.a)(e,i);return Object(r.b)("wrapper",Object(o.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("h3",{id:"provider"},"Provider"),Object(r.b)("p",null,"Before using with styles in your application, you need to wrap your app with ",Object(r.b)("inlineCode",{parentName:"p"},"ThemeProvider")," first."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"ThemeProvider only takes ",Object(r.b)("inlineCode",{parentName:"p"},"theme")," and ",Object(r.b)("inlineCode",{parentName:"p"},"default Theme")," props.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},'const theme = {\n  colors: {\n    light: {\n      background: "black",\n    },\n    dark: {\n      background: "white",\n    },\n    blue: {\n      background: "darkBlue",\n    },\n  },\n  fonts: {\n    default: "roboto",\n  },\n};\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"If you want to load different color palettes, you need to give these palettes in ",Object(r.b)("inlineCode",{parentName:"p"},"colors"),".\nThe keys you use here are important. You will use these keys when changing the theme.")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The default value of ",Object(r.b)("inlineCode",{parentName:"p"},"defaultTheme")," is ",Object(r.b)("inlineCode",{parentName:"p"},"light"),". You can give this field one of your color palettes under colors.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},'import React from "react";\nimport { ThemeProvider } from "react-native-with-style";\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme} defaultTheme="light">\n      {/* Your app components */}\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n')),Object(r.b)("h3",{id:"with-styles"},"With Styles"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"withStyles")," is a high order function. You need to give your component as a parameter. You do not need to use StyleSheet again for the style function you will create. ",Object(r.b)("inlineCode",{parentName:"p"},"withStyles")," does this for you"),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"The styles function you created takes other fields as parameters, such as the color and fonts you pass in the theme."))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},'import withStyles from "react-native-with-style";\n\nconst styles = ({ color, fonts }) => ({\n  container: {\n    flex: 1,\n    backgroundColor: color.background,\n    justifyContent: "center",\n    alignItems: "center",\n  },\n  text: {\n    fontFamily: fonts.default,\n  },\n});\n\nexport default withStyles(styles)(HomeScreen);\n')),Object(r.b)("h3",{id:"component-props"},"Component Props"),Object(r.b)("p",null,"Takes 4 props wrapped with withStyles."),Object(r.b)("h3",{id:"styles"},Object(r.b)("inlineCode",{parentName:"h3"},"styles")),Object(r.b)("p",null,"return the styles you created for the components"),Object(r.b)("h3",{id:"theme"},Object(r.b)("inlineCode",{parentName:"h3"},"theme")),Object(r.b)("p",null,"return the current theme if you want to do the styling directly in the component and not via styles"),Object(r.b)("h3",{id:"themetype"},Object(r.b)("inlineCode",{parentName:"h3"},"themeType")),Object(r.b)("p",null,"Returns the key of the current theme."),Object(r.b)("h3",{id:"toggletheme"},Object(r.b)("inlineCode",{parentName:"h3"},"toggleTheme")),Object(r.b)("p",null,"Function that allows you to change the theme. It takes the key of the new theme as a parameter."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-tsx"},'const HomeScreen = ({ styles, themeType, toggleTheme, theme }) => {\n  const barStyle = themeType === "light" ? "dark-content" : "light-content";\n\n  const handleToggleTheme = () => {\n    toggleTheme(themeType === "light" ? "dark" : "light");\n  };\n\n  \n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={barStyle} />\n      <TouchableOpacity onPress={handleToggleTheme}>\n        <Text style={styles.text}>Switch Theme</Text>\n      </TouchableOpacity>\n    </SafeAreaView>\n  );\n};\n')))}h.isMDXComponent=!0}}]);