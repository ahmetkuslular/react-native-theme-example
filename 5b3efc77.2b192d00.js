(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var o=n(3),a=n(7),i=(n(0),n(88)),c=["components"],r={id:"with-style",title:"With Style",slug:"/with-style",hide_table_of_contents:!0,hide_title:!0},l={unversionedId:"with-style",id:"with-style",isDocsHomePage:!1,title:"With Style",description:"With Style",source:"@site/docs/withStyle.md",slug:"/with-style",permalink:"/react-native-with-style/docs/with-style",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/withStyle.md",version:"current",sidebar:"someSidebar",previous:{title:"Provider",permalink:"/react-native-with-style/docs/provider"},next:{title:"useWithStyle",permalink:"/react-native-with-style/docs/use-with-style"}},s=[{value:"<code>styles</code> | object",id:"styles--object",children:[]},{value:"<code>currentTheme</code> | object",id:"currenttheme--object",children:[]},{value:"<code>themeTypes</code> | array",id:"themetypes--array",children:[]},{value:"<code>themeType</code> | string",id:"themetype--string",children:[]},{value:"<code>toggleTheme</code> | function",id:"toggletheme--function",children:[]}],h={toc:s};function d(e){var t=e.components,n=Object(a.a)(e,c);return Object(i.b)("wrapper",Object(o.a)({},h,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"with-style"},"With Style"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"withStyle")," is a high order function. You need to give your component as a parameter. You do not need to use StyleSheet again for the style function you will create. ",Object(i.b)("inlineCode",{parentName:"p"},"withStyle")," does this for you"),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"The styles function you created takes other fields as parameters, such as the color and fonts you pass in the theme."))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},'import withStyle from "react-native-with-style";\n\nconst styles = ({ color, fonts }) => ({\n  container: {\n    flex: 1,\n    backgroundColor: color.background,\n    justifyContent: "center",\n    alignItems: "center",\n  },\n  text: {\n    fontFamily: fonts.default,\n  },\n});\n\nexport default withStyle(HomeScreen, styles);\n')),Object(i.b)("h1",{id:"component-props"},"Component Props"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Takes 5 props wrapped with withStyle.")),Object(i.b)("h3",{id:"styles--object"},Object(i.b)("inlineCode",{parentName:"h3"},"styles")," | object"),Object(i.b)("p",null,"return the styles you created for the components"),Object(i.b)("h3",{id:"currenttheme--object"},Object(i.b)("inlineCode",{parentName:"h3"},"currentTheme")," | object"),Object(i.b)("p",null,"return the current theme if you want to do the styling directly in the component and not via styles"),Object(i.b)("h3",{id:"themetypes--array"},Object(i.b)("inlineCode",{parentName:"h3"},"themeTypes")," | array"),Object(i.b)("p",null,"Returns the key of the all themes."),Object(i.b)("h3",{id:"themetype--string"},Object(i.b)("inlineCode",{parentName:"h3"},"themeType")," | string"),Object(i.b)("p",null,"Returns the key of the current theme."),Object(i.b)("h3",{id:"toggletheme--function"},Object(i.b)("inlineCode",{parentName:"h3"},"toggleTheme")," | function"),Object(i.b)("p",null,"Function that allows you to change the theme. It takes the key of the new theme as a parameter."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},'const HomeScreen = ({ styles, themeType, toggleTheme, theme }) => {\n  const barStyle = themeType === "light" ? "dark-content" : "light-content";\n\n  const handleToggleTheme = () => {\n    toggleTheme(themeType === "light" ? "dark" : "light");\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle={barStyle} />\n      <TouchableOpacity onPress={handleToggleTheme}>\n        <Text style={styles.text}>Switch Theme</Text>\n      </TouchableOpacity>\n    </SafeAreaView>\n  );\n};\n')))}d.isMDXComponent=!0}}]);